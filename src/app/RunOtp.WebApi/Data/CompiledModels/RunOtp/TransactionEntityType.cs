// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using RunOtp.Domain.TransactionAggregate;
using RunOtp.Domain.UserAggregate;
using Shared.SeedWork;
using Action = RunOtp.Domain.TransactionAggregate.Action;

#pragma warning disable 219, 612, 618
#nullable disable

namespace RunOtp.WebApi
{
    internal partial class TransactionEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "RunOtp.Domain.TransactionAggregate.Transaction",
                typeof(Transaction),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(Entity).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Entity).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation("Relational:ColumnName", "id");

            var action = runtimeEntityType.AddProperty(
                "Action",
                typeof(Action),
                propertyInfo: typeof(Transaction).GetProperty("Action", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<Action>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            action.AddAnnotation("Relational:ColumnName", "action");

            var bankAccount = runtimeEntityType.AddProperty(
                "BankAccount",
                typeof(string),
                propertyInfo: typeof(Transaction).GetProperty("BankAccount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<BankAccount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            bankAccount.AddAnnotation("Relational:ColumnName", "bank_account");

            var completedDate = runtimeEntityType.AddProperty(
                "CompletedDate",
                typeof(DateTimeOffset),
                propertyInfo: typeof(Transaction).GetProperty("CompletedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<CompletedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            completedDate.AddAnnotation("Relational:ColumnName", "completed_date");

            var createdBy = runtimeEntityType.AddProperty(
                "CreatedBy",
                typeof(string),
                propertyInfo: typeof(ModifierTrackingEntity).GetProperty("CreatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModifierTrackingEntity).GetField("<CreatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            createdBy.AddAnnotation("Relational:ColumnName", "created_by");

            var createdById = runtimeEntityType.AddProperty(
                "CreatedById",
                typeof(Guid),
                propertyInfo: typeof(ModifierTrackingEntity).GetProperty("CreatedById", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModifierTrackingEntity).GetField("<CreatedById>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            createdById.AddAnnotation("Relational:ColumnName", "created_by_id");

            var createdDate = runtimeEntityType.AddProperty(
                "CreatedDate",
                typeof(DateTimeOffset),
                propertyInfo: typeof(DateTrackingEntity).GetProperty("CreatedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DateTrackingEntity).GetField("<CreatedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            createdDate.AddAnnotation("Relational:ColumnName", "created_date");

            var errorMessage = runtimeEntityType.AddProperty(
                "ErrorMessage",
                typeof(string),
                propertyInfo: typeof(Transaction).GetProperty("ErrorMessage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<ErrorMessage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            errorMessage.AddAnnotation("Relational:ColumnName", "error_message");

            var lastUpdatedBy = runtimeEntityType.AddProperty(
                "LastUpdatedBy",
                typeof(string),
                propertyInfo: typeof(ModifierTrackingEntity).GetProperty("LastUpdatedBy", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModifierTrackingEntity).GetField("<LastUpdatedBy>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lastUpdatedBy.AddAnnotation("Relational:ColumnName", "last_updated_by");

            var lastUpdatedById = runtimeEntityType.AddProperty(
                "LastUpdatedById",
                typeof(Guid),
                propertyInfo: typeof(ModifierTrackingEntity).GetProperty("LastUpdatedById", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ModifierTrackingEntity).GetField("<LastUpdatedById>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            lastUpdatedById.AddAnnotation("Relational:ColumnName", "last_updated_by_id");

            var lastUpdatedDate = runtimeEntityType.AddProperty(
                "LastUpdatedDate",
                typeof(DateTimeOffset),
                propertyInfo: typeof(DateTrackingEntity).GetProperty("LastUpdatedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DateTrackingEntity).GetField("<LastUpdatedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            lastUpdatedDate.AddAnnotation("Relational:ColumnName", "last_updated_date");

            var note = runtimeEntityType.AddProperty(
                "Note",
                typeof(string),
                propertyInfo: typeof(Transaction).GetProperty("Note", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<Note>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            note.AddAnnotation("Relational:ColumnName", "note");

            var paymentGateway = runtimeEntityType.AddProperty(
                "PaymentGateway",
                typeof(PaymentGateway),
                propertyInfo: typeof(Transaction).GetProperty("PaymentGateway", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<PaymentGateway>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            paymentGateway.AddAnnotation("Relational:ColumnName", "payment_gateway");

            var @ref = runtimeEntityType.AddProperty(
                "Ref",
                typeof(string),
                propertyInfo: typeof(Transaction).GetProperty("Ref", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<Ref>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            @ref.AddAnnotation("Relational:ColumnName", "ref");

            var response = runtimeEntityType.AddProperty(
                "Response",
                typeof(string),
                propertyInfo: typeof(Transaction).GetProperty("Response", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<Response>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            response.AddAnnotation("Relational:ColumnName", "response");

            var status = runtimeEntityType.AddProperty(
                "Status",
                typeof(TransactionStatus),
                propertyInfo: typeof(Transaction).GetProperty("Status", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<Status>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            status.AddAnnotation("Relational:ColumnName", "status");

            var totalAmount = runtimeEntityType.AddProperty(
                "TotalAmount",
                typeof(decimal),
                propertyInfo: typeof(Transaction).GetProperty("TotalAmount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<TotalAmount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            totalAmount.AddAnnotation("Relational:ColumnName", "total_amount");

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(Guid),
                propertyInfo: typeof(Transaction).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            userId.AddAnnotation("Relational:ColumnName", "user_id");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "pk_transaction");

            var index = runtimeEntityType.AddIndex(
                new[] { userId });
            index.AddAnnotation("Relational:Name", "ix_transaction_user_id");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("UserId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var appUser = declaringEntityType.AddNavigation("AppUser",
                runtimeForeignKey,
                onDependent: true,
                typeof(AppUser),
                propertyInfo: typeof(Transaction).GetProperty("AppUser", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Transaction).GetField("<AppUser>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var transactions = principalEntityType.AddNavigation("Transactions",
                runtimeForeignKey,
                onDependent: false,
                typeof(IList<Transaction>),
                propertyInfo: typeof(AppUser).GetProperty("Transactions", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AppUser).GetField("<Transactions>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "fk_transaction_app_user_app_user_id");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", "data");
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "transaction");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
